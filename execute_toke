#include "shell.h"

/**
 * execute_command - Execute a shell command with arguments.
 * @command: The command to be executed.
 *
 * This function creates a child process using `fork()` and attempts to execute
 * the specified command with arguments using `execve()`. The parent process
 * waits for the child to complete. If an error occurs, an error message is
 * printed using `perror()` and the program exits with an error status.
 */
void execute_command(const char *command)
{
	pid_t child_pid = fork();
	char *args[150];
	char *token = strtok((char *)command, " ");
	int arg_count = 0;

if (child_pid == -1)
{
	dom_print("Error while forking process.\n");
	exit(EXIT_FAILURE);
}
else if (child_pid == 0)
{
	while (token != NULL)
	{
		args[arg_count++] = token;
		token = strtok(NULL, " ");
	}
	args[arg_count] = NULL;

	char *cmd = args[0];
	char *envp[] = { NULL };

	if (execve(cmd, args, envp) == -1)
	{
		perror("execve");
		exit(EXIT_FAILURE);
	}
	}
	else
	{
		wait(NULL);
	}
}


